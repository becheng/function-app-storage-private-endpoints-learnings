# IMPORTANT Reminders:
# 1. The service principal used by the github action must be assigned a an Azure custom rbac role with 
#    the microsoft.authority/roleassignment/write permission in order to run the roleassignment in the bicep file
# 2. The service principal used by the github action at a minimum have the Azure Contributor role at the target resource group.

name: function to private endpoint storage sample

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  NODEJS_VERSION: '18.1.0' 
  AZURE_FUNCTIONAPP_PACKAGE_PATH: './src'
  BUILD_OUTPUT_PATH: './build-artifacts'  
  BUILD_PACKAGE_NAME: 'az-func.zip'

defaults:
  run:
    shell: bash

permissions:
  id-token: write
  contents: read

jobs:

  # 1. deploy the azure infra
  deploy-az-infra:
    #if: ${{ false }} #disable for now
    runs-on: ubuntu-latest
    environment: sample
    outputs:
      fcn-app-name: ${{ steps.getFcnAppName.outputs.fcnAppName }}

    steps:
      # Checkout code
    - uses: actions/checkout@v3.0.2

      # Log into Azure
    - uses: Azure/login@v1.4.6
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Hash the resource group's ID so it's unique but also repeatable
      # steps: 
      # 1. retrieve the resouceGroup's id property
      # 2. hash the id and take the first 8 chars of the hash
      # 3. set the output to a var so it may be referred in the deploy task to set   
    - name: generate unique fcn app suffix 
      id: fcnappsuffix
      shell: bash
      run: |
        rsGroupId=$(az group list --query "[?name=='${{ secrets.AZURE_RG }}'].id" -o tsv)
        echo "resource group id: $rsGroupId"
        suffix=$(echo -n $rsGroupId | shasum | cut -c1-8)
        echo "generated suffix: $suffix"
        echo "::set-output name=fcnSuffix :: $suffix"
        unset rsGroupId
        unset suffix
               
      # generate fcnAppName based on pefcn+suffix 
    - name: generate fcn app name
      id: getFcnAppName
      shell: bash
      run: |
        fcnAppName="pefcn${{ steps.fcnappsuffix.outputs.fcnSuffix }}"
        echo "::set-output name=fcnAppName :: $fcnAppName"
      
      # Deploy Bicep file
    - name: deploy
      uses: azure/arm-deploy@v1.0.8
      with:
        subscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        resourceGroupName: ${{ secrets.AZURE_RG }}
        template: ./deploy/main.bicep
        parameters: 'func_name=${{ steps.getFcnAppName.outputs.fcnAppName }}' 
        failOnStdErr: false
  
  # 2. build the code
  build-az-function:
    needs: [deploy-az-infra]
    runs-on: ubuntu-latest
    environment: sample

    steps:    
      # Checkout code
    - uses: actions/checkout@v3.0.2

    - name: Setup Node.js environment
      uses: actions/setup-node@v3.5.0
      with:
        # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
        node-version: ${{ env.NODEJS_VERSION }}

      # resolve npm dependencies, build + test
      # Notes: 
      #   zip -r ../${{ env.BUILD_OUTPUT_PATH }}/${{ env.BUILD_PACKAGE_NAME }} .
      #   '-r' means it's going to zip all contents and directories recursively
      #   '../' is traversing up a directory, note the line above it, the 'mkdir' is createing an output directory at the root where the src dir resides 
      #   '.' means the current directory, i.e. starting zipping at this dir 
    - name: 'Resolve Project Dependencies Using Npm'
      shell: bash
      run: |
        pushd '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        npm install
        npm run build --if-present
        npm run test --if-present
        popd
        mkdir ${{ env.BUILD_OUTPUT_PATH }}
        cd '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
        zip -r ../${{ env.BUILD_OUTPUT_PATH }}/${{ env.BUILD_PACKAGE_NAME }} . 

      # Upload the code artifact, this will be used later
    - name: 'Package Azure Function release build'
      uses: actions/upload-artifact@v3.1.0
      with:
        name: build_artifacts
        path: ${{ env.BUILD_OUTPUT_PATH }}
        if-no-files-found: error

  # 3. deploy
  deploy-az-function:
    needs: [build-az-function]
    runs-on: ubuntu-latest
    environment: sample

    steps:    

      # Checkout code
    - uses: actions/checkout@v3.0.2

      # azure login
    - name: 'login to azure'
      uses: azure/login@v1.4.6
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # fetch the function publish profile
    - name: 'fetching fcn publish profile'
      uses: azure/cli@v1
      id: fcnapp
      with:
        inlineScript: |
          profile=$(az webapp deployment list-publishing-profiles -g "${{ secrets.AZURE_RG }}" -n "${{ needs.deploy-az-infra.outputs.fcn-app-name }}" --xml)          
          echo "::set-output name=pubprofile :: $profile"
          unset profile
        azcliversion: "latest"

    - name: 'create output dir'
      shell: bash
      run: |
        mkdir ${{ env.BUILD_OUTPUT_PATH }}

    - name: 'download azure fcn zip'
      uses: actions/download-artifact@v3.0.0
      with:
        name: build_artifacts
        path: ${{ env.BUILD_OUTPUT_PATH }}

    - name: 'publish fcn zip to fcn app'
      uses: Azure/functions-action@v1.4.7
      with:
        app-name: ${{ needs.deploy-az-infra.outputs.fcn-app-name }} 
        package: ${{ env.BUILD_OUTPUT_PATH }}/${{ env.BUILD_PACKAGE_NAME }}
        publish-profile: ${{ steps.fncapp.outputs.pubprofile }}  